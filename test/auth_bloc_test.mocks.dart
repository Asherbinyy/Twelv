// Mocks generated by Mockito 5.0.7 from annotations
// in twelv/test/auth_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/src/bloc.dart' as _i9;
import 'package:bloc/src/transition.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:twelv/blocs/auth/authentication/authentication_bloc.dart'
    as _i6;
import 'package:twelv/blocs/auth/authentication/authentication_event.dart'
    as _i7;
import 'package:twelv/blocs/auth/authentication/authentication_state.dart'
    as _i3;
import 'package:twelv/blocs/auth/authorization/authorization_model.dart' as _i5;
import 'package:twelv/blocs/auth/authorization/models/access_token_response.dart'
    as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeAccessTokenResponse extends _i1.Fake
    implements _i2.AccessTokenResponse {}

class _FakeAuthenticationState extends _i1.Fake
    implements _i3.AuthenticationState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [AuthorizationModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationModel extends _i1.Mock
    implements _i5.AuthorizationModel {
  @override
  void sessionHasFinished() =>
      super.noSuchMethod(Invocation.method(#sessionHasFinished, []),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.AccessTokenResponse> exchangeAuthenticationToken(
          String? token) =>
      (super.noSuchMethod(
              Invocation.method(#exchangeAuthenticationToken, [token]),
              returnValue: Future<_i2.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i4.Future<_i2.AccessTokenResponse>);
  @override
  _i4.Future<void> storeCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#storeCurrentUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> reloadNotificationsToken() =>
      (super.noSuchMethod(Invocation.method(#reloadNotificationsToken, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i6.AuthenticationBloc {
  @override
  _i3.AuthenticationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeAuthenticationState()) as _i3.AuthenticationState);
  @override
  _i4.Stream<_i3.AuthenticationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.AuthenticationState>.empty())
          as _i4.Stream<_i3.AuthenticationState>);
  @override
  _i4.Stream<_i3.AuthenticationState> mapEventToState(
          _i7.AuthenticationEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.AuthenticationState>.empty())
          as _i4.Stream<_i3.AuthenticationState>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  void add(_i7.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>
      transformEvents(
              _i4.Stream<_i7.AuthenticationEvent>? events,
              _i9.TransitionFunction<_i7.AuthenticationEvent, _i3.AuthenticationState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>.empty())
              as _i4.Stream<
                  _i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>);
  @override
  void emit(_i3.AuthenticationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>
      transformTransitions(
              _i4.Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>.empty())
              as _i4.Stream<
                  _i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>);
  @override
  _i4.StreamSubscription<_i3.AuthenticationState> listen(
          void Function(_i3.AuthenticationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i3.AuthenticationState>())
          as _i4.StreamSubscription<_i3.AuthenticationState>);
  @override
  void onChange(_i8.Change<_i3.AuthenticationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
