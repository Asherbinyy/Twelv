// Mocks generated by Mockito 5.3.2 from annotations
// in twelv/test/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:twelv/blocs/auth/authentication/authentication_bloc.dart'
    as _i6;
import 'package:twelv/blocs/auth/authentication/authentication_event.dart'
    as _i7;
import 'package:twelv/blocs/auth/authentication/authentication_state.dart'
    as _i3;
import 'package:twelv/blocs/auth/authorization/authorization_model.dart' as _i5;
import 'package:twelv/blocs/auth/authorization/models/access_token_response.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccessTokenResponse_0 extends _i1.SmartFake
    implements _i2.AccessTokenResponse {
  _FakeAccessTokenResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationState_1 extends _i1.SmartFake
    implements _i3.AuthenticationState {
  _FakeAuthenticationState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthorizationModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationModel extends _i1.Mock
    implements _i5.AuthorizationModel {
  @override
  void sessionHasFinished() => super.noSuchMethod(
        Invocation.method(
          #sessionHasFinished,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.AccessTokenResponse> exchangeAuthenticationToken(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #exchangeAuthenticationToken,
          [token],
        ),
        returnValue: _i4.Future<_i2.AccessTokenResponse>.value(
            _FakeAccessTokenResponse_0(
          this,
          Invocation.method(
            #exchangeAuthenticationToken,
            [token],
          ),
        )),
      ) as _i4.Future<_i2.AccessTokenResponse>);
  @override
  _i4.Future<void> storeCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #storeCurrentUser,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> reloadNotificationsToken() => (super.noSuchMethod(
        Invocation.method(
          #reloadNotificationsToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i6.AuthenticationBloc {
  @override
  _i3.AuthenticationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthenticationState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AuthenticationState);
  @override
  _i4.Stream<_i3.AuthenticationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.AuthenticationState>.empty(),
      ) as _i4.Stream<_i3.AuthenticationState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i4.Stream<_i3.AuthenticationState> mapEventToState(
          _i7.AuthenticationEvent? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapEventToState,
          [event],
        ),
        returnValue: _i4.Stream<_i3.AuthenticationState>.empty(),
      ) as _i4.Stream<_i3.AuthenticationState>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void add(_i7.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i7.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>
      transformEvents(
    _i4.Stream<_i7.AuthenticationEvent>? events,
    _i8.TransitionFunction<_i7.AuthenticationEvent, _i3.AuthenticationState>?
        transitionFn,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #transformEvents,
              [
                events,
                transitionFn,
              ],
            ),
            returnValue: _i4.Stream<
                _i8.Transition<_i7.AuthenticationEvent,
                    _i3.AuthenticationState>>.empty(),
          ) as _i4.Stream<
              _i8.Transition<_i7.AuthenticationEvent,
                  _i3.AuthenticationState>>);
  @override
  void emit(_i3.AuthenticationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i7.AuthenticationEvent>(
    _i8.EventHandler<E, _i3.AuthenticationState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i8.Transition<_i7.AuthenticationEvent, _i3.AuthenticationState>>
      transformTransitions(
              _i4.Stream<
                      _i8.Transition<_i7.AuthenticationEvent,
                          _i3.AuthenticationState>>?
                  transitions) =>
          (super.noSuchMethod(
            Invocation.method(
              #transformTransitions,
              [transitions],
            ),
            returnValue: _i4.Stream<
                _i8.Transition<_i7.AuthenticationEvent,
                    _i3.AuthenticationState>>.empty(),
          ) as _i4.Stream<
              _i8.Transition<_i7.AuthenticationEvent,
                  _i3.AuthenticationState>>);
  @override
  _i4.StreamSubscription<_i3.AuthenticationState> listen(
    void Function(_i3.AuthenticationState)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_2<_i3.AuthenticationState>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i4.StreamSubscription<_i3.AuthenticationState>);
  @override
  void onChange(_i8.Change<_i3.AuthenticationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
