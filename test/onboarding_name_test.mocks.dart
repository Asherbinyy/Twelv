// Mocks generated by Mockito 5.3.2 from annotations
// in twelv/test/onboarding_name_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/widgets.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:twelv/services/navigation/navigation.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i2.Mock implements _i3.NavigationService {
  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey => (super.noSuchMethod(
        Invocation.getter(#navigatorKey),
        returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
      ) as _i1.GlobalKey<_i1.NavigatorState>);
  @override
  bool isCurrent({required String? route}) => (super.noSuchMethod(
        Invocation.method(
          #isCurrent,
          [],
          {#route: route},
        ),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<dynamic> navigateTo<T>(
    String? route, {
    T? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#args: args},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> navigateToIfNotCurrent<T>(
    String? route, {
    T? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToIfNotCurrent,
          [route],
          {#args: args},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> replaceTo(String? route) => (super.noSuchMethod(
        Invocation.method(
          #replaceTo,
          [route],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void popUntil(String? routeName) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [routeName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<T?> popAllAndNavigateTo<T extends Object>(
    String? route, {
    Object? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #popAllAndNavigateTo,
          [route],
          {#args: args},
        ),
        returnValue: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<bool> pop<T>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  void didPop(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPush(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i1.Route<dynamic>? newRoute,
    _i1.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
