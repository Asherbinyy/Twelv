// Mocks generated by Mockito 5.0.7 from annotations
// in twelv/test/onboarding_name_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter/src/widgets/framework.dart' as _i1;
import 'package:flutter/src/widgets/navigator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;
import 'package:twelv/services/navigation/navigation.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeGlobalKey<T extends _i1.State<_i1.StatefulWidget>> extends _i2.Fake
    implements _i1.GlobalKey<T> {}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i2.Mock implements _i3.NavigationService {
  @override
  _i1.GlobalKey<_i4.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey<_i4.NavigatorState>())
          as _i1.GlobalKey<_i4.NavigatorState>);
  @override
  bool isCurrent({String? route}) =>
      (super.noSuchMethod(Invocation.method(#isCurrent, [], {#route: route}),
          returnValue: false) as bool);
  @override
  _i5.Future<dynamic> navigateTo<T>(String? route, {T? args}) => (super
      .noSuchMethod(Invocation.method(#navigateTo, [route], {#args: args}),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> navigateToIfNotCurrent<T>(String? route, {T? args}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateToIfNotCurrent, [route], {#args: args}),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> replaceTo(String? route) =>
      (super.noSuchMethod(Invocation.method(#replaceTo, [route]),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<T?> popAllAndNavigateTo<T extends Object>(String? route,
          {Object? args}) =>
      (super.noSuchMethod(
          Invocation.method(#popAllAndNavigateTo, [route], {#args: args}),
          returnValue: Future<T?>.value(null)) as _i5.Future<T?>);
  @override
  _i5.Future<bool> pop<T>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void didPop(_i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPush(_i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i4.Route<dynamic>? newRoute, _i4.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i4.Route<dynamic>? route, _i4.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}
